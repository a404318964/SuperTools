package com.zwj.supertools.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zwj.supertools.bean.xs.XsContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "XS_CONTENT".
*/
public class XsContentDao extends AbstractDao<XsContent, String> {

    public static final String TABLENAME = "XS_CONTENT";

    /**
     * Properties of entity XsContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property BookType = new Property(1, Integer.class, "bookType", false, "BOOK_TYPE");
        public final static Property ContentType = new Property(2, Integer.class, "contentType", false, "CONTENT_TYPE");
        public final static Property FromBook = new Property(3, String.class, "fromBook", false, "FROM_BOOK");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property BookTypeName = new Property(5, String.class, "bookTypeName", false, "BOOK_TYPE_NAME");
        public final static Property ContentTypeName = new Property(6, String.class, "contentTypeName", false, "CONTENT_TYPE_NAME");
        public final static Property FromBookName = new Property(7, String.class, "fromBookName", false, "FROM_BOOK_NAME");
        public final static Property CreateTime = new Property(8, java.util.Date.class, "createTime", false, "CREATE_TIME");
    }


    public XsContentDao(DaoConfig config) {
        super(config);
    }
    
    public XsContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XS_CONTENT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"BOOK_TYPE\" INTEGER," + // 1: bookType
                "\"CONTENT_TYPE\" INTEGER," + // 2: contentType
                "\"FROM_BOOK\" TEXT," + // 3: fromBook
                "\"CONTENT\" TEXT," + // 4: content
                "\"BOOK_TYPE_NAME\" TEXT," + // 5: bookTypeName
                "\"CONTENT_TYPE_NAME\" TEXT," + // 6: contentTypeName
                "\"FROM_BOOK_NAME\" TEXT," + // 7: fromBookName
                "\"CREATE_TIME\" INTEGER);"); // 8: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XS_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, XsContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Integer bookType = entity.getBookType();
        if (bookType != null) {
            stmt.bindLong(2, bookType);
        }
 
        Integer contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindLong(3, contentType);
        }
 
        String fromBook = entity.getFromBook();
        if (fromBook != null) {
            stmt.bindString(4, fromBook);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String bookTypeName = entity.getBookTypeName();
        if (bookTypeName != null) {
            stmt.bindString(6, bookTypeName);
        }
 
        String contentTypeName = entity.getContentTypeName();
        if (contentTypeName != null) {
            stmt.bindString(7, contentTypeName);
        }
 
        String fromBookName = entity.getFromBookName();
        if (fromBookName != null) {
            stmt.bindString(8, fromBookName);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XsContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Integer bookType = entity.getBookType();
        if (bookType != null) {
            stmt.bindLong(2, bookType);
        }
 
        Integer contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindLong(3, contentType);
        }
 
        String fromBook = entity.getFromBook();
        if (fromBook != null) {
            stmt.bindString(4, fromBook);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String bookTypeName = entity.getBookTypeName();
        if (bookTypeName != null) {
            stmt.bindString(6, bookTypeName);
        }
 
        String contentTypeName = entity.getContentTypeName();
        if (contentTypeName != null) {
            stmt.bindString(7, contentTypeName);
        }
 
        String fromBookName = entity.getFromBookName();
        if (fromBookName != null) {
            stmt.bindString(8, fromBookName);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(9, createTime.getTime());
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public XsContent readEntity(Cursor cursor, int offset) {
        XsContent entity = new XsContent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // bookType
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // contentType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fromBook
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookTypeName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contentTypeName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fromBookName
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XsContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setContentType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFromBook(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookTypeName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContentTypeName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFromBookName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreateTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(XsContent entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(XsContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(XsContent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
